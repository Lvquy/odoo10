# -*- coding: utf-8 -*-

from odoo import api, fields, models, tools, _


# 继承product.category 模块，新增category_code字段。"类别编号"
class ProductCategory(models.Model):
    _inherit = "product.category"

    category_code = fields.Char('Category Code', index=True, help="Category of the code")


# 继承res.partner 模块，新增partner_new_code字段。"合作伙伴编号"
class Partner(models.Model):
    _inherit = "res.partner"

    partner_code = fields.Char('Partner Code', index=True, default='New', help="Partner of the code")
    is_company = fields.Boolean(default=True)


    @api.model
    def create(self, vals):
        if vals.get('partner_code', 'New') == 'New':
            if vals.get('customer'):
                vals['partner_code'] = self.env['ir.sequence'].next_by_code('partner_cu_code') or '/'
            if vals.get('supplier'):
                vals['partner_code'] = self.env['ir.sequence'].next_by_code('partner_sr_code') or '/'
        return super(Partner, self).create(vals)



# 继承product.template 模块，修改default_code字段属性为只读。
# 新增category_code字段，用于关联 "类别字段" 的 "类别编号"。保存在数据库中。
class ProductTemplate(models.Model):
    _inherit = "product.template"

    name = fields.Char(track_visibility='onchange')
    state = fields.Selection([
        ('draft', 'Draft'),
        ('done', 'Locked'),
        ('cancel', 'Cancelled'),
    ], string='Status', readonly=True, copy=False, index=True, track_visibility='onchange', default='draft')
    # track_visibility='onchange' : mail.thread 模型有一个强大的字段跟踪系统，可将对应值的变化记录到讨论系统中。
    # 为了对字段进行监听，只需要将track_visibility 属性设置为:
    # onchange（当字段值改变时展示在通知中），
    # always(该值总是会被显示在通知中，一般用于让通知内容更好理解)
    categ_id = fields.Many2one(readonly=True, states={"draft": [('readonly', False)]}, track_visibility='onchange')
    default_code = fields.Char(readonly=True, states={"draft": [('readonly', False)]},
                               index=True, default='New', track_visibility='onchange',
                               help="Product material code, automatically generated by category.")
    active = fields.Boolean(default=False)
    type = fields.Selection(default='product')
    sale_ok = fields.Boolean(default=False)
    # purchase_ok = fields.Boolean(default=False)
    product_type = fields.Selection(string='Product Type', readonly=True, states={"draft": [('readonly', False)]},
                                    selection=[
                                        ('material', 'Material'),
                                        ('sample', 'Sample'),
                                        ('finished', 'Finished'),
                                    ], default='material', )
    parent_id = fields.Many2one('res.partner', string='Related Company')
    cust_product_name =fields.Char(string='Customer Product Name')

    @api.model
    def create(self, vals):
        if vals.get('default_code', 'New') == 'New':
            categ_code = self.env['product.category'].search([('id', '=', vals.get('categ_id'))]).category_code

            if vals.get('product_type') == 'material':
                vals['default_code'] = self.env['ir.sequence'].next_by_code(categ_code) or '/'

            partner_code = self.env['res.partner'].search([('id', '=', vals.get('parent_id'))]).partner_code
            if vals.get('product_type') == 'sample':
                vals['default_code'] = "8" + partner_code[2:4] + categ_code[1:3] + self.env['ir.sequence'].next_by_code(categ_code) or '/'

            if vals.get('product_type') == 'finished':
                vals['default_code'] = "9" + partner_code[2:4] + categ_code[1:3] + self.env['ir.sequence'].next_by_code(categ_code) or '/'

        return super(ProductTemplate, self).create(vals)

    @api.multi
    def action_cancel(self):
        self.write({'state': 'cancel'})
        self.write({'active': False})

    @api.multi
    def action_done(self):
        self.write({'state': 'done'})
        self.write({'active': True})
    @api.multi
    def action_draft(self):
        self.write({'state': 'draft'})
        self.write({'active': False})